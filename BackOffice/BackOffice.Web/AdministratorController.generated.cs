// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace BackOffice.Web.Controllers
{
    public partial class AdministratorController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdministratorController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AdministratorController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AdminEcoActivityUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminEcoActivityUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AdminRLUploadProvider()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminRLUploadProvider);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdministratorController Actions { get { return MVC.Administrator; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Administrator";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Administrator";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string AdminUserUpsert = "AdminUserUpsert";
            public readonly string AdminGeoUpsert = "AdminGeoUpsert";
            public readonly string AdminBankUpsert = "AdminBankUpsert";
            public readonly string AdminCompanyRulesUpsert = "AdminCompanyRulesUpsert";
            public readonly string AdminRulesUpsert = "AdminRulesUpsert";
            public readonly string AdminResolutionUpsert = "AdminResolutionUpsert";
            public readonly string AdminEcoActivityUpsert = "AdminEcoActivityUpsert";
            public readonly string AdminEcoGroupUpsert = "AdminEcoGroupUpsert";
            public readonly string AdminTreeUpsert = "AdminTreeUpsert";
            public readonly string AdminTRMUpsert = "AdminTRMUpsert";
            public readonly string AdminRLUploadProvider = "AdminRLUploadProvider";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string AdminUserUpsert = "AdminUserUpsert";
            public const string AdminGeoUpsert = "AdminGeoUpsert";
            public const string AdminBankUpsert = "AdminBankUpsert";
            public const string AdminCompanyRulesUpsert = "AdminCompanyRulesUpsert";
            public const string AdminRulesUpsert = "AdminRulesUpsert";
            public const string AdminResolutionUpsert = "AdminResolutionUpsert";
            public const string AdminEcoActivityUpsert = "AdminEcoActivityUpsert";
            public const string AdminEcoGroupUpsert = "AdminEcoGroupUpsert";
            public const string AdminTreeUpsert = "AdminTreeUpsert";
            public const string AdminTRMUpsert = "AdminTRMUpsert";
            public const string AdminRLUploadProvider = "AdminRLUploadProvider";
        }


        static readonly ActionParamsClass_AdminEcoActivityUpsert s_params_AdminEcoActivityUpsert = new ActionParamsClass_AdminEcoActivityUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminEcoActivityUpsert AdminEcoActivityUpsertParams { get { return s_params_AdminEcoActivityUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminEcoActivityUpsert
        {
            public readonly string TreeId = "TreeId";
            public readonly string TreeName = "TreeName";
        }
        static readonly ActionParamsClass_AdminRLUploadProvider s_params_AdminRLUploadProvider = new ActionParamsClass_AdminRLUploadProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminRLUploadProvider AdminRLUploadProviderParams { get { return s_params_AdminRLUploadProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminRLUploadProvider
        {
            public readonly string ExcelFile = "ExcelFile";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AdminBankUpsert = "AdminBankUpsert";
                public readonly string AdminCompanyRulesUpsert = "AdminCompanyRulesUpsert";
                public readonly string AdminEcoActivityUpsert = "AdminEcoActivityUpsert";
                public readonly string AdminEcoGroupUpsert = "AdminEcoGroupUpsert";
                public readonly string AdminGeoUpsert = "AdminGeoUpsert";
                public readonly string AdminResolutionUpsert = "AdminResolutionUpsert";
                public readonly string AdminRLUploadProvider = "AdminRLUploadProvider";
                public readonly string AdminRulesUpsert = "AdminRulesUpsert";
                public readonly string AdminTreeUpsert = "AdminTreeUpsert";
                public readonly string AdminTRMUpsert = "AdminTRMUpsert";
                public readonly string AdminUserUpsert = "AdminUserUpsert";
                public readonly string Index = "Index";
            }
            public readonly string AdminBankUpsert = "~/Views/Administrator/AdminBankUpsert.cshtml";
            public readonly string AdminCompanyRulesUpsert = "~/Views/Administrator/AdminCompanyRulesUpsert.cshtml";
            public readonly string AdminEcoActivityUpsert = "~/Views/Administrator/AdminEcoActivityUpsert.cshtml";
            public readonly string AdminEcoGroupUpsert = "~/Views/Administrator/AdminEcoGroupUpsert.cshtml";
            public readonly string AdminGeoUpsert = "~/Views/Administrator/AdminGeoUpsert.cshtml";
            public readonly string AdminResolutionUpsert = "~/Views/Administrator/AdminResolutionUpsert.cshtml";
            public readonly string AdminRLUploadProvider = "~/Views/Administrator/AdminRLUploadProvider.cshtml";
            public readonly string AdminRulesUpsert = "~/Views/Administrator/AdminRulesUpsert.cshtml";
            public readonly string AdminTreeUpsert = "~/Views/Administrator/AdminTreeUpsert.cshtml";
            public readonly string AdminTRMUpsert = "~/Views/Administrator/AdminTRMUpsert.cshtml";
            public readonly string AdminUserUpsert = "~/Views/Administrator/AdminUserUpsert.cshtml";
            public readonly string Index = "~/Views/Administrator/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_AdministratorController : BackOffice.Web.Controllers.AdministratorController
    {
        public T4MVC_AdministratorController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminUserUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminUserUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminUserUpsert);
            AdminUserUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminGeoUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminGeoUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminGeoUpsert);
            AdminGeoUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminBankUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminBankUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminBankUpsert);
            AdminBankUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminCompanyRulesUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminCompanyRulesUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminCompanyRulesUpsert);
            AdminCompanyRulesUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminRulesUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminRulesUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminRulesUpsert);
            AdminRulesUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminResolutionUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminResolutionUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminResolutionUpsert);
            AdminResolutionUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminEcoActivityUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int TreeId, string TreeName);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminEcoActivityUpsert(int TreeId, string TreeName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminEcoActivityUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "TreeId", TreeId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "TreeName", TreeName);
            AdminEcoActivityUpsertOverride(callInfo, TreeId, TreeName);
            return callInfo;
        }

        [NonAction]
        partial void AdminEcoGroupUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminEcoGroupUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminEcoGroupUpsert);
            AdminEcoGroupUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminTreeUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminTreeUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminTreeUpsert);
            AdminTreeUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminTRMUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminTRMUpsert()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminTRMUpsert);
            AdminTRMUpsertOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminRLUploadProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Web.HttpPostedFileBase ExcelFile);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminRLUploadProvider(System.Web.HttpPostedFileBase ExcelFile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminRLUploadProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExcelFile", ExcelFile);
            AdminRLUploadProviderOverride(callInfo, ExcelFile);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
