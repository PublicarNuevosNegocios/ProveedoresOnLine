@model BackOffice.Models.Provider.ProviderViewModel

@{
    ViewBag.Title = "HSEQ";
    Layout = "~/Views/Shared/_Layout.cshtml";

    Model.RenderScripts = false;
}

@*ESTE ES EL ENVUELTO COMPLETO DE MENU LATERAL Y CONTENIDO*@
<div class="POBOProviderWrapper">
    @*ESTE ES QUE TRAE EL PARCIAL QUE PINTA EL MENU LATERAL*@
    <div class="POBOProviderSideMenuWrapper">
        @Html.Partial(MVC.Shared.Views._P_ProviderMenu, Model)
    </div>
    <div class="POBOProviderContentWrapper">
        <div class="POBOProviderUpsertForm" id="divRiskPoliciesContent">
            <label class="POBOSectionTitles">Sistema de riesgos laborales</label>
            @{
                Model.IsForm = true;
                Html.RenderPartial(MVC.Shared.Views._P_ProviderActions, Model);

                var SystemOccupationalHazards = Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ?
                        Model.RelatedProvider.RelatedCertification.Where(x => x.ItemInfo != null).
                            Select(x => x.ItemInfo.Where(y => y.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_SystemOccupationalHazards).
                                Select(y => y.Value).FirstOrDefault()).FirstOrDefault() : string.Empty;

                var SystemOccupationalHazardsId = Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ?
                    Model.RelatedProvider.RelatedCertification.Where(x => x.ItemInfo != null).
                        Select(x => x.ItemInfo.Where(y => y.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_SystemOccupationalHazards).
                            Select(y => y.ItemInfoId).FirstOrDefault()).FirstOrDefault() : 0;

                var RateARL = Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ?
                    Model.RelatedProvider.RelatedCertification.Where(x => x.ItemInfo != null).
                        Select(x => x.ItemInfo.Where(y => y.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_RateARL).
                            Select(y => y.Value).FirstOrDefault()).FirstOrDefault() : string.Empty;

                var RateARLId = Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ?
                    Model.RelatedProvider.RelatedCertification.Where(x => x.ItemInfo != null).
                        Select(x => x.ItemInfo.Where(y => y.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_RateARL).
                            Select(y => y.ItemInfoId).FirstOrDefault()).FirstOrDefault() : 0;

                var CertificateAffiliateARL = Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ?
                    Model.RelatedProvider.RelatedCertification.Where(x => x.ItemInfo != null).
                        Select(x => x.ItemInfo.Where(y => y.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_CertificateAffiliateARL).
                            Select(y => y.Value).FirstOrDefault()).FirstOrDefault() : string.Empty;

                var CertificateAffiliateARLId = Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ?
                    Model.RelatedProvider.RelatedCertification.Where(x => x.ItemInfo != null).
                        Select(x => x.ItemInfo.Where(y => y.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_CertificateAffiliateARL).
                            Select(y => y.ItemInfoId).FirstOrDefault()).FirstOrDefault() : 0;
            }
            <form id="frmProviderUpsert" method="post" action="@(Url.Action
                (MVC.Provider.ActionNames.HIRiskPoliciesUpsert,
                MVC.Provider.Name,
                new {
                    ProviderPublicId = Model.RelatedProvider != null && Model.RelatedProvider.RelatedCompany != null ? Model.RelatedProvider.RelatedCompany.CompanyPublicId : string.Empty,
                }))">
                <ul>
                    <li class="POBOCamposProblematicos">
                        <label>Sistema de Riesgos: </label>
                        <br />
                        <input type="hidden" name="RiskPoliciesName" value="@(Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ? Model.RelatedProvider.RelatedCertification.Where(x => x.ItemName != null).Select(x => x.ItemName).FirstOrDefault() : string.Empty) " />
                        <input type="hidden" name="NameInfoId" value="@(Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null ? Model.RelatedProvider.RelatedCertification.Where(x => x.ItemId != null).Select(x => x.ItemId).FirstOrDefault() : 0) " />

                        <input type="text" id="OccupationalHazardsId" name="OccupationalHazardsId" value="@SystemOccupationalHazards" />
                        <input type="hidden" id="SelectedOccupationalHazards" name="SelectedOccupationalHazards" value="" />
                        <input type="hidden" id="SelectedOccupationalHazardsId" name="SelectedOccupationalHazardsId" value="@SystemOccupationalHazardsId" />
                    </li>
                    <li>
                        <label>Calificación de Riesgo ARL</label><br />
                        <select id="RateARLId" name="RateARL">
                            @{
                                <option value="0">Seleccione una Opción</option>

                                foreach (var Item in Model.ProviderOptions.Where(x => x.CatalogId == (int)BackOffice.Models.General.enumCatalog.ARLRate))
                                {
                                    if (RateARL != null &&
                                        RateARL.Length > 0 &&
                                        Item.ItemId == Convert.ToInt32(RateARL))
                                    {
                                        <option value="@Item.ItemId" selected>@Item.ItemName</option>
                                    }
                                    else
                                    {
                                        <option value="@Item.ItemId">@Item.ItemName</option>
                                    }
                                }
                            }
                        </select>
                        <input type="hidden" name="RateARLId" id="RateARLId" value="@RateARLId" />
                    </li>
                    <li>
                        <label>Afiliación ARL</label><br />
                        <br />
                        @Html.Partial(MVC.Shared.Views._F_FileUpload)
                        <input type="hidden" name="CertificateAffiliateARL" id="CertificateAffiliateARL" />
                        <input type="hidden" name="CertificateAffiliateARLId" id="CertificateAffiliateARLId" value="@CertificateAffiliateARLId" />
                        @if (CertificateAffiliateARL != null && CertificateAffiliateARL.Length > 0)
                        {
                            <div id="CertificateARLId">
                                <a target="_blank" href="@CertificateAffiliateARL">Ver archivo</a>
                            </div>
                        }
                    </li>
                </ul>
                <div style="display:none">
                    <input type="hidden" name="UpsertAction" id="UpsertAction" value="true" />
                    <input type="hidden" name="StepAction" id="StepAction" value="" />
                </div>
            </form>
            <ul class="POBOHSEQWrapper">
                <li class="POBOHSEQ">
                    <label>Certificados de Accidentalidad</label><br />
                    <div id="divGridRiskPolicies"></div>
                </li>
                <li class="POBOHSEQ">
                    @{
                        string oYear = string.Empty;
                        double oFatalities = 0;
                        double oAccidents = 0;
                        double oHours = 0;
                        double oLTIF = 0;

                        if (Model.RelatedProvider != null && Model.RelatedProvider.RelatedCertification != null)
                        {
                            foreach (var Item in Model.RelatedProvider.RelatedCertification)
                            {
                                oYear += Item.ItemInfo.Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_Year).
                                    Select(x => x.Value).
                                    DefaultIfEmpty(string.Empty).
                                    FirstOrDefault() + " ";

                                if (oYear.Length > 0 && oYear != null)
                                {
                                    string oReturn = string.Empty;

                                    oReturn = Item.ItemInfo.Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_Fatalities).
                                        Select(x => x.Value).
                                        DefaultIfEmpty(string.Empty).
                                        FirstOrDefault();
                                    
                                    oFatalities += Convert.ToDouble(oReturn == string.Empty ? "0.0" : oReturn);

                                    oReturn = Item.ItemInfo.Where(y => y.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_NumberAccidentDisabling).
                                        Select(y => y.Value).
                                        DefaultIfEmpty(string.Empty).
                                        FirstOrDefault();

                                    oAccidents += Convert.ToDouble(oReturn == string.Empty ? "0.0" : oReturn);

                                    oReturn = Item.ItemInfo.Where(z => z.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumHSEQInfoType.CR_ManHoursWorked).
                                        Select(z => z.Value).
                                        DefaultIfEmpty(string.Empty).
                                        FirstOrDefault();

                                    oHours += Convert.ToDouble(oReturn == string.Empty ? "0.0" : oReturn);
                                }
                            }

                            oLTIF = ((oFatalities + oAccidents) / oHours) * 1000000;
                        }
                    }
                    <label>Reporte LTIF</label>
                    <ul id="ReportLITF">
                        <li id="F1">
                            <label>Fatalidades + Accidentes Incapacitantes</label>
                            <hr />
                            <label>Horas hombre trabajadas</label>
                        </li>
                        <li id="F2">
                            <label>* 1'000.000</label>
                        </li>
                        <li id="F3">
                            <label>Resultado LTIF: @(oLTIF)</label>
                            <label>AÑOS: @(oYear)</label>
                        </li>
                    </ul>
                </li>
            </ul>
            @{
                Model.IsForm = true;
                Html.RenderPartial(MVC.Shared.Views._P_ProviderActions, Model);
            }
        </div>
    </div>
</div>

<!--templates by files-->
<div style="display:none;">
    <div id="divGridRiskPolicies_NoFile">
        <div>
            <span>Seleccione un archivo</span>
        </div>
    </div>
    <div id="divGridRiskPolicies_File">
        <div>
            <a target="_blank" href="${FileUrl}">Ver archivo</a>
        </div>
    </div>
</div>


@{
    Model.RenderScripts = true;
}

@section inlinescripts{

    @Html.Partial(MVC.Shared.Views._P_ProviderMenu, Model)
    @{
        string oYearList = "[]";
        Dictionary<int, string> oYearOption = new Dictionary<int, string>();
        int i = 0;
        for (int date = DateTime.Now.Year; date >= (DateTime.Now.Year - 19); date--)
        {
            oYearOption.Add(i, date.ToString());
            i++;
        }

        oYearOption = oYearOption.ToDictionary(k => k.Key, v => v.Value);

        oYearList = (new System.Web.Script.Serialization.JavaScriptSerializer()).
            Serialize(oYearOption.Select(x => new { Key = x.Key, Value = x.Value }));
    }

    <script type="text/javascript">
        $(document).ready(function () {
            var vYearOptionList = @(Html.Raw(oYearList));
            Provider_CompanyHSEQObject.Init({
                AutoCompleteId: 'OccupationalHazardsId',
                ControlToRetornACId: 'SelectedOccupationalHazards',
                ObjectId: 'divGridRiskPolicies',
                ProviderPublicId: '@Model.RelatedProvider.RelatedCompany.CompanyPublicId',
                HSEQType: '@((int)BackOffice.Models.General.enumHSEQType.CompanyRiskPolicies)',
                YearOptionList: vYearOptionList,
                DateFormat: '',
                HSEQOptionList: '',
            });
            UploadFile({
                ProviderPublicId: '@Model.RelatedProvider.RelatedCompany.CompanyPublicId',
                ControlellerResponseId: "CertificateAffiliateARL",
            });
            Provider_CompanyHSEQObject.RenderAsync();
        });
    </script>
}