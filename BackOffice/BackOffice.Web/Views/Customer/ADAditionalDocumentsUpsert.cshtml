@model BackOffice.Models.Customer.CustomerViewModel

@{
    ViewBag.Title = "Comprador - módulo de documentos adicionales";
    Layout = MVC.Shared.Views._Layout;

    Model.RenderScripts = false;
}

@*ESTE ES EL ENVUELTO COMPLETO DE MENU LATERAL Y CONTENIDO*@
<div class="POBOProviderWrapper">
    @*ESTE ES QUE TRAE EL PARCIAL QUE PINTA EL MENU LATERAL*@
    <div class="POBOProviderSideMenuWrapper">
        @Html.Partial(MVC.Shared.Views._C_CustomerMenu, Model)
    </div>
    <div class="POBOProviderContentWrapper">
        <div id="POBOProviderUpsertForm">
            <label class="POBOSectionTitles">Módulo de documentos adicionales</label>
            @{
                Model.IsForm = false;
                Html.RenderPartial(MVC.Shared.Views._C_CustomerActions, Model);
            }
            <div id="loading"></div>
            <div id="AditionalDocuments"></div>
            <br />
            @{
                Model.IsForm = false;
                Html.RenderPartial(MVC.Shared.Views._C_CustomerActions, Model);
            }
        </div>
    </div>
</div>

@{
    Model.RenderScripts = true;

    //get all modules
    string oModules = "[]";
    if (Model.CatalogGetAllModuleOptions != null &&
        Model.CatalogGetAllModuleOptions.Count > 0)
    {
        Dictionary<int, List<ProveedoresOnLine.Company.Models.Util.CatalogModel>> oModulesOptions =
            Model.CatalogGetAllModuleOptions.
            GroupBy(x => x.CatalogId).
            Select(x =>
            new
            {
                okey = x.Key,
                ovalue = Model.CatalogGetAllModuleOptions.Where(y => y.CatalogId == x.Key).OrderBy(y => y.ItemName).ToList(),
            }).ToDictionary(k => k.okey, v => v.ovalue);

        oModules = (new System.Web.Script.Serialization.JavaScriptSerializer()).
            Serialize(oModulesOptions.Select(x => new { Key = x.Key, Value = x.Value }));
    }
}

@section inlinescripts
{
    @Html.Partial(MVC.Shared.Views._C_CustomerMenu, Model)

    <script type="text/javascript">

        var vModulesOptions = @(Html.Raw(oModules));

        $(document).ready(function () {
            Customer_AditionalDocumentsObject.Init({
                ObjectId: 'AditionalDocuments',
                CustomerPublicId: '@Model.RelatedCustomer.RelatedCompany.CompanyPublicId',
                Modules: vModulesOptions,
            });

            Customer_AditionalDocumentsObject.RenderAsync();
        });
    </script>
}
