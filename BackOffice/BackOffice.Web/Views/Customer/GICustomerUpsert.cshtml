@model BackOffice.Models.Customer.CustomerViewModel

@{
    ViewBag.Title = "Comprador - Información General";
    Layout = MVC.Shared.Views._Layout;

    Model.RenderScripts = false;

    int CompanyInfoIdAux = 0;
    string CompanyInfoValueAux = string.Empty;

}

@*ESTE ES EL ENVUELTO COMPLETO DE MENU LATERAL Y CONTENIDO*@
<div class="POBOProviderWrapper">
    @*ESTE ES QUE TRAE EL PARCIAL QUE PINTA EL MENU LATERAL*@
    <div class="POBOProviderSideMenuWrapper">
        @Html.Partial(MVC.Shared.Views._C_CustomerMenu, Model)
    </div>

    <div class="POBOProviderContentWrapper">

        <form class="POBOProviderUpsertForm" id="frmProviderUpsert"
              method="post"
              action="@(Url.Action
                (MVC.Customer.ActionNames.GICustomerUpsert,
                MVC.Customer.Name,
                new
                {
                    CustomerPublicId = Model.RelatedCustomer != null && Model.RelatedCustomer.RelatedCompany != null ? Model.RelatedCustomer.RelatedCompany.CompanyPublicId : string.Empty,
                }))">
            <label class="POBOSectionTitles">Información básica</label>
            @{
                Model.IsForm = true;
                Html.RenderPartial(MVC.Shared.Views._C_CustomerActions, Model);
            }
            <span class="POBOPCompulsoryFields">Campos obligatorios *</span>
            <ul>
                <li>
                    <label><span class="POBOPCompulsoryFields">*</span> Tipo de identificación</label>
                    <br />
                    <select name="IdentificationType">
                        @foreach (var Item in Model.CustomerOptions.Where(x => x.CatalogId == (int)BackOffice.Models.General.enumCatalog.CompanyIdentificationType))
                        {
                            if (Model.RelatedCustomer != null &&
                                Model.RelatedCustomer.RelatedCompany != null &&
                                Model.RelatedCustomer.RelatedCompany.IdentificationType != null &&
                                Model.RelatedCustomer.RelatedCompany.IdentificationType.ItemId == Item.ItemId)
                            {
                                <option value="@Item.ItemId" selected="selected">@Item.ItemName</option>
                            }
                            else
                            {
                                <option value="@Item.ItemId">@Item.ItemName</option>
                            }
                        }
                    </select>
                </li>
                <li>
                    <label><span class="POBOPCompulsoryFields">*</span> Número de identificación</label>
                    <br />
                    <input type="text" name="IdentificationNumber" value="@(Model.RelatedCustomer != null && Model.RelatedCustomer.RelatedCompany != null ? Model.RelatedCustomer.RelatedCompany.IdentificationNumber : string.Empty)" />
                </li>
                <li>
                    @{
                        //Check Digit
                        CompanyInfoIdAux = 0;
                        CompanyInfoValueAux = string.Empty;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CheckDigit).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValueAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CheckDigit).
                                Select(x => x.Value).
                                DefaultIfEmpty(string.Empty).
                                FirstOrDefault();
                        }
                    }

                    <label><span class="POBOPCompulsoryFields">*</span> Dígito de verificación</label>
                    <br />
                    <input type="text" name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.CheckDigit).ToString())_@CompanyInfoIdAux.ToString()" value="@CompanyInfoValueAux" />
                </li>
                <li>
                    <label><span class="POBOPCompulsoryFields">*</span> Razón social</label>
                    <br />
                    <input type="text" name="CompanyName" value="@(Model.RelatedCustomer != null && Model.RelatedCustomer.RelatedCompany != null ? Model.RelatedCustomer.RelatedCompany.CompanyName : string.Empty)" />
                </li>
                <li>
                    @{
                        //Comercial Name

                        CompanyInfoIdAux = 0;
                        CompanyInfoValueAux = string.Empty;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.ComercialName).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValueAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.ComercialName).
                                Select(x => x.Value).
                                DefaultIfEmpty(string.Empty).
                                FirstOrDefault();
                        }
                    }
                    <label>Nombre Comercial</label>
                    <br />
                    <input type="text" name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.ComercialName).ToString())_@CompanyInfoIdAux.ToString()" value="@CompanyInfoValueAux" />
                </li>
                <li>
                    <label><span class="POBOPCompulsoryFields">*</span> Tipo de empresa</label>
                    <br />
                    <select name="CompanyType">
                        @foreach (var Item in Model.CustomerOptions.Where(x => x.CatalogId == (int)BackOffice.Models.General.enumCatalog.CompanyType))
                        {
                            if (Model.RelatedCustomer != null &&
                                Model.RelatedCustomer.RelatedCompany != null &&
                                Model.RelatedCustomer.RelatedCompany.CompanyType != null &&
                                Model.RelatedCustomer.RelatedCompany.CompanyType.ItemId == Item.ItemId)
                            {
                                <option value="@Item.ItemId" selected="selected">@Item.ItemName</option>
                            }
                            else
                            {
                                <option value="@Item.ItemId">@Item.ItemName</option>
                            }
                        }
                    </select>
                </li>
                <li>
                    @{
                        //salesforce info

                        CompanyInfoIdAux = 0;
                        CompanyInfoValueAux = string.Empty;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.SalesforceId).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValueAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.SalesforceId).
                                Select(x => x.Value).
                                DefaultIfEmpty(string.Empty).
                                FirstOrDefault();
                        }
                    }
                    <label>Código de salesforce</label>
                    <br />
                    <input type="text" name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.SalesforceId).ToString())_@CompanyInfoIdAux.ToString()" value="@CompanyInfoValueAux" />
                    @if (!string.IsNullOrEmpty(CompanyInfoValueAux))
                    {
                        <a class="POBOSmallCaption" target="_blank" href="@(BackOffice.Models.General.InternalSettings.Instance[BackOffice.Models.General.Constants.C_Settings_Path_SalesForce].Value.TrimEnd('/') + "/" + CompanyInfoValueAux)"> Ver en salesforce</a>
                    }
                </li>
                <li>
                    @{
                        //coin type

                        CompanyInfoIdAux = 0;
                        CompanyInfoValueAux = string.Empty;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CoinType).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValueAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CoinType).
                                Select(x => x.Value).
                                DefaultIfEmpty(string.Empty).
                                FirstOrDefault();
                        }
                    }
                    <label> Tipo de moneda</label>
                    <select name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.CoinType).ToString())_@CompanyInfoIdAux.ToString()">
                        <option value="">Seleccione una opción</option>
                        @foreach (var Item in Model.CustomerOptions.Where(x => x.CatalogId == (int)BackOffice.Models.General.enumCatalog.CoinType))
                        {
                            if (Model.RelatedCustomer != null &&
                                Model.RelatedCustomer.RelatedCompany != null &&
                                Model.RelatedCustomer.RelatedCompany.CompanyType != null &&
                                !string.IsNullOrEmpty(CompanyInfoValueAux) &&
                                Item.ItemId.ToString() == CompanyInfoValueAux)
                            {
                                <option value="@Item.ItemId" selected>@Item.ItemName</option>
                            }
                            else
                            {
                                <option value="@Item.ItemId">@Item.ItemName</option>
                            }
                        }
                    </select>
                </li>
                <li>
                    @{
                        //payment info

                        CompanyInfoIdAux = 0;
                        CompanyInfoValueAux = string.Empty;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.ProviderPaymentInfo).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValueAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.ProviderPaymentInfo).
                                Select(x => x.Value).
                                DefaultIfEmpty(string.Empty).
                                FirstOrDefault();
                        }
                    }
                    <label><span class="POBOPCompulsoryFields">*</span> Información de Pago</label>
                    <select name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.ProviderPaymentInfo).ToString())_@CompanyInfoIdAux.ToString()">
                        @foreach (var Item in Model.CustomerOptions.Where(x => x.CatalogId == (int)BackOffice.Models.General.enumCatalog.ProviderPaymentInfo))
                        {
                            if (Model.RelatedCustomer != null &&
                                Model.RelatedCustomer.RelatedCompany != null &&
                                Model.RelatedCustomer.RelatedCompany.CompanyType != null &&
                                !string.IsNullOrEmpty(CompanyInfoValueAux) &&
                                Item.ItemId.ToString() == CompanyInfoValueAux)
                            {
                                <option value="@Item.ItemId" selected>@Item.ItemName</option>
                            }
                            else
                            {
                                <option value="@Item.ItemId">@Item.ItemName</option>
                            }
                        }
                    </select>
                </li>
                <li>
                    @{
                        //economic activity info

                        CompanyInfoIdAux = 0;
                        CompanyInfoValueAux = string.Empty;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CustomEconomicActivity).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValueAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CustomEconomicActivity).
                                Select(x => x.Value).
                                DefaultIfEmpty(string.Empty).
                                FirstOrDefault();
                        }
                    }
                    <label>Actividad economica personalizada</label>
                    <select name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.CustomEconomicActivity).ToString())_@CompanyInfoIdAux.ToString()">
                        <option value="">Seleccione una opción</option>
                        @foreach (var Item in Model.CustomActivityTree.OrderBy(x => x.TreeName))
                        {
                            if (Model.RelatedCustomer != null &&
                                Model.RelatedCustomer.RelatedCompany != null &&
                                Model.RelatedCustomer.RelatedCompany.CompanyType != null &&
                                !string.IsNullOrEmpty(CompanyInfoValueAux) &&
                                Item.TreeId.ToString() == CompanyInfoValueAux)
                            {
                                <option value="@Item.TreeId" selected>@Item.TreeId - @Item.TreeName</option>
                            }
                            else
                            {
                                <option value="@Item.TreeId">@Item.TreeId - @Item.TreeName</option>
                            }
                        }
                    </select>
                </li>
                <li>
                    @{
                        //survey group info

                        CompanyInfoIdAux = 0;
                        CompanyInfoValueAux = string.Empty;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.SurveyGroup).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValueAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.SurveyGroup).
                                Select(x => x.Value).
                                DefaultIfEmpty(string.Empty).
                                FirstOrDefault();
                        }
                    }
                    <label>Grupo de encuesta</label>
                    <select name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.SurveyGroup).ToString())_@CompanyInfoIdAux.ToString()">
                        <option value="">Seleccione una opción</option>
                        @foreach (var Item in Model.SurveyGroup.OrderBy(x => x.TreeName))
                        {
                            if (Model.RelatedCustomer != null &&
                                Model.RelatedCustomer.RelatedCompany != null &&
                                Model.RelatedCustomer.RelatedCompany.CompanyType != null &&
                                !string.IsNullOrEmpty(CompanyInfoValueAux) &&
                                Item.TreeId.ToString() == CompanyInfoValueAux)
                            {
                                <option value="@Item.TreeId" selected>@Item.TreeId - @Item.TreeName</option>
                            }
                            else
                            {
                                <option value="@Item.TreeId">@Item.TreeId - @Item.TreeName</option>
                            }
                        }
                    </select>
                </li>
                <li>
                    <label><span class="POBOPCompulsoryFields">*</span> Habilitado</label><br />
                    @if (Model.RelatedCustomer != null &&
                        Model.RelatedCustomer.RelatedCompany != null &&
                        !Model.RelatedCustomer.RelatedCompany.Enable)
                    {
                        <input type="checkbox" name="Enable" />
                    }
                    else
                    {
                        <input type="checkbox" name="Enable" checked="checked" />
                    }
                </li>
                <li>
                    <label>Ver otros Proveedores</label><br />
                    @{
                        //View others Providers info

                        CompanyInfoIdAux = 0;
                        bool CompanyInfoValue = true;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.OtherProviders).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValue = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.OtherProviders).
                                Select(x => x.Value).
                                FirstOrDefault() == "1" ? true : false;
                        }
                    }

                    <input type="hidden" name="OtherProvidersId" value="@CompanyInfoIdAux.ToString()" />
                    @if (CompanyInfoValue == true)
                    {
                        <input type="checkbox" name="OtherProviders" checked="checked" />
                    }
                    else
                    {
                        <input type="checkbox" name="OtherProviders" />
                    }
                </li>
                <li>
                    <label>Datos personalizados</label><br />
                    @{ 
                        //custom data

                        CompanyInfoIdAux = 0;
                        CompanyInfoValue = true;

                        if (Model.RelatedCustomer != null &&
                            Model.RelatedCustomer.RelatedCompany != null &&
                            Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                        {
                            CompanyInfoIdAux = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CustomData).
                                Select(x => x.ItemInfoId).
                                DefaultIfEmpty(0).
                                FirstOrDefault();

                            CompanyInfoValue = Model.RelatedCustomer.
                                RelatedCompany.
                                CompanyInfo.
                                Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CustomData).
                                Select(x => x.Value).
                                FirstOrDefault() == "1" ? true : false;
                        }
                    }

                    <input type="hidden" name="CustomDataId" value="@CompanyInfoIdAux.ToString()" />
                    @if (CompanyInfoValue == true)
                    {
                        <input type="checkbox" name="CustomData" checked="checked" />
                    }
                    else
                    {
                        <input type="checkbox" name="CustomData" />
                    }
                </li>
                @if (Model.RelatedCustomer != null && Model.RelatedCustomer.RelatedCompany != null)
                {
                    <li>
                        <label>Logo</label><br />

                        @{
                            CompanyInfoIdAux = 0;
                            CompanyInfoValueAux = string.Empty;

                            if (Model.RelatedCustomer != null &&
                                Model.RelatedCustomer.RelatedCompany != null &&
                                Model.RelatedCustomer.RelatedCompany.CompanyInfo != null)
                            {
                                CompanyInfoIdAux = Model.RelatedCustomer.
                                    RelatedCompany.
                                    CompanyInfo.
                                    Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CompanyLogo).
                                    Select(x => x.ItemInfoId).
                                    DefaultIfEmpty(0).
                                    FirstOrDefault();

                                CompanyInfoValueAux = Model.RelatedCustomer.
                                    RelatedCompany.
                                    CompanyInfo.
                                    Where(x => x.ItemInfoType.ItemId == (int)BackOffice.Models.General.enumCompanyInfoType.CompanyLogo).
                                    Select(x => x.Value).
                                    DefaultIfEmpty(string.Empty).
                                    FirstOrDefault();
                            }
                        }
                        @Html.Partial(MVC.Shared.Views._F_FileUpload)
                        <input type="hidden" id="iptLogo" name="CompanyInfoType_@(((int)BackOffice.Models.General.enumCompanyInfoType.CompanyLogo).ToString())_@CompanyInfoIdAux.ToString()" value="@CompanyInfoValueAux" />
                        @if (CompanyInfoValueAux != null && CompanyInfoValueAux.Length > 0)
                        {
                            <div>
                                <a target="_blank" href="@CompanyInfoValueAux">Ver archivo</a>
                            </div>
                            <div>
                                <img src="@CompanyInfoValueAux" style="width: 50px; height: 50px;" />
                            </div>
                        }
                    </li>
                }
            </ul>
            <div style="display:none">
                <input type="hidden" name="UpsertAction" id="UpsertAction" value="true" />
                <input type="hidden" name="StepAction" id="StepAction" value="" />
            </div>
            <br />
            @{
                Model.IsForm = true;
                Html.RenderPartial(MVC.Shared.Views._C_CustomerActions, Model);
            }
        </form>
    </div>
</div>
@{
    Model.RenderScripts = true;
}

@section inlinescripts
{
    @Html.Partial(MVC.Shared.Views._C_CustomerMenu, Model)

    <script type="text/javascript">
        $(document).ready(function () {

            if ('true' == '@((Model.RelatedCustomer != null && Model.RelatedCustomer.RelatedCompany != null).ToString().ToLower())') {
                UploadFile({
                    ProviderPublicId: '@(Model.RelatedCustomer != null && Model.RelatedCustomer.RelatedCompany != null ? Model.RelatedCustomer.RelatedCompany.CompanyPublicId : string.Empty)',
                    ControlellerResponseId: 'iptLogo'
                });
            }
        });
    </script>
}