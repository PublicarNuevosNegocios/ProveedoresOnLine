@model BackOffice.Models.Customer.CustomerViewModel

@{
    ViewBag.Title = "Comprador - Proceso de Calificación- Reglas de Validación.";
    Layout = MVC.Shared.Views._Layout;

    Model.RenderScripts = false;
}
@*ESTE ES EL ENVUELTO COMPLETO DE MENU LATERAL Y CONTENIDO*@
<div class="POBOProviderWrapper">
    @*ESTE ES QUE TRAE EL PARCIAL QUE PINTA EL MENU LATERAL*@
    <div class="POBOProviderSideMenuWrapper">
        @Html.Partial(MVC.Shared.Views._C_CustomerMenu, Model)
    </div>

    <div class="POBOProviderContentWrapper">
        <div id="POBOProviderUpsertForm">
            <label class="POBOSectionTitles">Reglas de Validación</label>
            @{
                Model.IsForm = false;
                Html.RenderPartial(MVC.Shared.Views._C_CustomerActions, Model);
            }
            <div id="loading"></div>
            <div id="divGridCalificationProjectConfigValidate"></div>
            <br />
            @{
                Model.IsForm = false;
                Html.RenderPartial(MVC.Shared.Views._C_CustomerActions, Model);
            }
        </div>
    </div>
</div>

<!--templates-->
<div style="display:none">

    <div id="divGridCalificationProjectConfigValidate_ShortcutToolTipTemplate">
        <img class="divGrid_kbtooltip" src="@Url.Content(BackOffice.Models.General.InternalSettings.Instance[BackOffice.Models.General.Constants.C_Settings_InfoTooltip].Value)" title=" Nuevo (alt+shift+n) -  Guardar (alt+shift+g) - Descartar (alt+shift+d) " />
    </div>

    <div id="divGridCalificationProjectConfigValidate_ViewEnablesTemplate">
        <label class="POBOProviderGridVerSoloTrue">Ver solo los habilitados</label>
        <input class="POBOProviderGridEnableContact" id="divGridCalificationProjectConfigValidate_ViewEnable" type="checkbox" checked="checked" />
    </div>
</div>

@{
    Model.RenderScripts = true;

    //get CalificationProjectConfigValueList
    string oCalificationProjectOptionList = "[]";
    if (Model.CustomerOptions != null &&
        Model.CustomerOptions.Count > 0)
    {
        Dictionary<int, List<ProveedoresOnLine.Company.Models.Util.CatalogModel>> oOptionList =
            Model.CustomerOptions.
            GroupBy(x => x.CatalogId).
            Select(x =>
                new
                {
                    okey = x.Key,
                    ovalue = Model.CustomerOptions.Where(y => y.CatalogId == x.Key).OrderBy(y => y.ItemName).ToList(),
                }).ToDictionary(k => k.okey, v => v.ovalue);

        oCalificationProjectOptionList = (new System.Web.Script.Serialization.JavaScriptSerializer()).
            Serialize(oOptionList.Select(x => new { Key = x.Key, Value = x.Value }));
    }
}

@section inlinescripts
{
    @Html.Partial(MVC.Shared.Views._C_CustomerMenu, Model)

    <script type="text/javascript">
        var vCustomerInfoOptionList =@(Html.Raw(oCalificationProjectOptionList));

        $(document).ready(function () {
            Customer_CalificationProjectObject.Init({
                ObjectId: 'divGridCalificationProjectConfigValidate',
                CalificationProjectConfigId: '@Model.RelatedCalificationProjectConfig.CalificationProjectConfigId',
                CustomerPublicId: '@Model.RelatedCustomer.RelatedCompany.CompanyPublicId',
                CalificationProjectConfigType: 2004003,
                CustomerOptions: vCustomerInfoOptionList,
            });

            Customer_CalificationProjectObject.RenderAsync();
        });
    </script>

}


